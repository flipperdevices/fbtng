Import("ENV")
Import("VARS")

VARS.AddVariables(
    (
        "COPRO_CUBE_VERSION",
        "Cube version",
        "",
    ),
    (
        "COPRO_STACK_ADDR",
        "Core2 Firmware address",
        "0",
    ),
    (
        "COPRO_STACK_BIN",
        "Core2 Firmware file name",
        "",
    ),
    (
        "COPRO_DISCLAIMER",
        "Value to pass to bundling script to confirm dangerous operations",
        "",
    ),
    PathVariable(
        "COPRO_OB_DATA",
        help="Path to OB reference data",
        validator=PathVariable.PathIsFile,
        default="",
    ),
    PathVariable(
        "COPRO_STACK_BIN_DIR",
        help="Path to ST-provided stacks",
        validator=PathVariable.PathIsDir,
        default="",
    ),
    PathVariable(
        "COPRO_CUBE_DIR",
        help="Path to Cube root",
        validator=PathVariable.PathIsDir,
        default="",
    ),
    EnumVariable(
        "COPRO_STACK_TYPE",
        help="Core2 stack type",
        default="ble_light",
        allowed_values=[
            "ble_full",
            "ble_light",
            "ble_basic",
        ],
    ),
)

extra_help_text = """

TASKS:
Firmware & apps:
    firmware_all, fw_dist:
        Build firmware; create distribution package
    faps, fap_dist:
        Build all FAP apps
    fap_{APPID}, build APPSRC={APPID}; launch APPSRC={APPID}:
        Build FAP app with appid={APPID}; upload & start it over USB
    fap_deploy:
        Build and upload all FAP apps over USB
    

Flashing & debugging:
    flash, jflash:
        Flash firmware to target using SWD probe. See also DEBUG_INTERFACE, DEBUG_INTERFACE_SERIAL
    flash_usb, flash_usb_full: 
        Install firmware using self-update package
    debug, debug_other, blackmagic: 
        Start GDB

Other:
    cli:
        Open a Flipper CLI session over USB
    firmware_cdb, updater_cdb:
        Generate —Åompilation_database.json
    lint, lint_py:
        run linters
    format, format_py:
        run code formatters
    firmware_pvs:
        generate a PVS-Studio report

How to open a shell with toolchain environment and other build tools:
    In your shell, type "source `./fbt -s env`". You can also use "." instead of "source".

For more info on available build targets and other details, see documentation/fbt.md
"""

var_help = VARS.GenerateHelpText(ENV)
ENV.Help(var_help, append=True, keep_local=True)
ENV.Help(extra_help_text, append=True)
