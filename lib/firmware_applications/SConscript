import itertools

from fbt.appmanifest import FlipperApplication
from SCons.Node import FS

Import("env")

# Set up app configuration
fwenv = env

fwenv.AppendUnique(
    CPPPATH=[Dir(".").srcnode()],
)


fw_build_configuration = env["FW_BUILD_META"]["type"]


extra_int_apps_list = []
if extra_int_apps := GetOption("extra_int_apps"):
    extra_int_apps_list = extra_int_apps.split(",")

fwenv.SetDefault(APPS=extra_int_apps)

if fw_build_configuration == "firmware":
    fwenv.AppendUnique(
        APPS=fwenv["FIRMWARE_APPS"].get(fwenv.subst("$FIRMWARE_APP_SET"))
    )
elif fw_build_configuration == "updater":
    # Inject updater service into the build
    fwenv.AppendUnique(APPS=["updater"])
else:
    raise ValueError(f"Unknown firmware type: {fw_build_configuration}")


for app_dir, _ in fwenv["APPDIRS"]:
    app_dir_node = env.Dir("#").Dir(app_dir)

    for entry in app_dir_node.glob("*"):
        if isinstance(entry, FS.Dir) and not str(entry).startswith("."):
            fwenv.LoadAppManifest(entry)

# Here we load all the app manifests and process them according to the current configuration
fwenv.PrepareApplicationsBuild()

fwenv.AppendUnique(
    # Add preprocessor definitions for current set of apps to global list, available to all modules
    CPPDEFINES=fwenv["APPBUILD"].get_apps_cdefs(),
    LINT_SOURCES=[Dir("#applications")],  # FIXME
)


libenv = env.Clone(
    FW_LIB_NAME="applications",
    tools=["fbt_templite"],
)
libenv.ApplyLibFlags()

# This will be the variant dir for the library
apps_build_dir = libenv.Dir("approot")
# And this will map the root of the project to the variant dir
libenv.VariantDir(apps_build_dir, "#", duplicate=0)

# Build applications.c for selected services & apps
# Depends on virtual value-only node, so it only gets rebuilt when set of apps changes
# apps_c = libenv.ApplicationsC(
#     "applications.c",
#     [Value(fwenv["APPS"])],
# )

apps_c = libenv.TempliteFile(
    "newapps.c",
    "template/applications.c.tmpl",
    SUBST_DICT={
        "autorun_app_name": fwenv.subst("$LOADER_AUTOSTART"),
        "buildset": fwenv["APPBUILD"],
    },
)

# Adding dependency on manifest files so apps.c is rebuilt when any manifest is changed
for app_dir, _ in env["APPDIRS"]:
    app_dir_node = env.Dir("#").Dir(app_dir)
    fwenv.Depends(
        apps_c, app_dir_node.glob("*/" + FlipperApplication.APP_MANIFEST_DEFAULT_NAME)
    )


sources = [apps_c, "svc_startup.c"]

# Gather sources only from app folders in current configuration
sources.extend(
    map(
        # This is a bit of a hack. We need to get the node from current dir, where
        # root of the project had been mapped to. But GatherSources returns original nodes
        lambda node: apps_build_dir.File(node.get_tpath()),
        itertools.chain.from_iterable(
            # fwenv.GatherSources([source_type, "!lib"], appdir.relpath)
            fwenv.GatherSources([source_type, "!lib"], appdir)
            for appdir, source_type in fwenv["APPBUILD"].get_builtin_app_folders()
        ),
    )
)


lib = libenv.StaticLibrary("${FW_LIB_NAME}", sources)
libenv.Install("${LIB_DIST_DIR}", lib)
Return("lib")
