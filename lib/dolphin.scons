Import("env")


assetsenv = env.Clone(
    tools=["fbt_assets"],
    FW_LIB_NAME="dolphin_assets",
    ASSETS_WORK_DIR=env.Dir("dolphin_assets"),
    ASSETS_SRC_DIR=env.Dir("#/assets").rdir(),
)
assetsenv.ApplyLibFlags()


# Internal animations
dolphin_internal = assetsenv.DolphinSymBuilder(
    assetsenv["ASSETS_WORK_DIR"],
    assetsenv["ASSETS_SRC_DIR"].Dir("dolphin").rdir(),
    DOLPHIN_RES_TYPE="internal",
)
assetsenv.Alias("dolphin_internal", dolphin_internal)


# Blocking animations
dolphin_blocking = assetsenv.DolphinSymBuilder(
    assetsenv["ASSETS_WORK_DIR"],
    assetsenv["ASSETS_SRC_DIR"].Dir("dolphin").rdir(),
    DOLPHIN_RES_TYPE="blocking",
)
assetsenv.Alias("dolphin_blocking", dolphin_blocking)

headers = list(
    filter(
        lambda fn: fn.name.endswith(".h"), Flatten((dolphin_internal, dolphin_blocking))
    )
)
sources = list(
    filter(
        lambda fn: not fn.name.endswith(".h"),
        Flatten((dolphin_internal, dolphin_blocking)),
    )
)

env.AppendUnique(
    FW_ASSETS_HEADERS=headers,
    FW_STATIC_ANALYSIS_DEPS=[dolphin_internal, dolphin_blocking],
    CPPPATH=[assetsenv["ASSETS_WORK_DIR"]],
)

lib = assetsenv.StaticLibrary("${FW_LIB_NAME}", sources)
assetsenv.Install("${LIB_DIST_DIR}", lib)
Return("lib")
