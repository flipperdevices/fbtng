Import("ENV", "fw_build_meta")

# Building initial C environment for libs
env = ENV.Clone(
    tools=[
        "fbt_apps",
        "fbt_hwtarget",
        "fbt_envhooks",
        ("compilation_db", {"COMPILATIONDB_COMSTR": "\tCDB\t${TARGET}"}),
    ],
    FW_BUILD_META=fw_build_meta,
    COMPILATIONDB_USE_ABSPATH=False,
    COMPILATIONDB_USE_BINARY_ABSPATH=True,
    BUILD_DIR=fw_build_meta["build_dir"],
    FW_FLAVOR=fw_build_meta["flavor"],
    LIB_DIST_DIR=fw_build_meta["build_dir"].Dir("lib"),
    RESOURCES_ROOT=fw_build_meta["build_dir"].Dir("resources"),
    TARGETS_ROOT=Dir("#/targets"),
    LINT_SOURCES=[
        Dir("applications"),
    ],
    LIBPATH=[
        "${LIB_DIST_DIR}",
    ],
    CPPPATH=[
        "#/furi",
        *(f"#/{app_dir[0]}" for app_dir in ENV["APPDIRS"] if app_dir[1]),
        "#/targets/furi_hal_include",
    ],
    # Specific flags for building libraries - always do optimized builds
    FW_LIB_OPTS={
        "Default": {
            "CCFLAGS": [
                "-Og" if ENV["LIB_DEBUG"] else "-Os",
            ],
            "CPPDEFINES": [
                "FURI_DEBUG" if ENV["LIB_DEBUG"] else "FURI_NDEBUG",
                # "DEBUG" if ENV["DEBUG"] else "NDEBUG",
                "NDEBUG",  # FIXME
            ],
            # You can add other entries named after libraries
            # If they are present, they have precedence over Default
        },
        # for furi_check to respect build type
        "furi": {
            "CCFLAGS": [
                "-Os",
            ],
            "CPPDEFINES": [
                "FURI_DEBUG" if ENV["DEBUG"] else "",
                # "DEBUG" if ENV["DEBUG"] else "NDEBUG",
                "NDEBUG",  # FIXME
            ],
        },
        "flipper_application": {
            "CCFLAGS": [
                "-Og",
            ],
            "CPPDEFINES": [
                "FURI_DEBUG" if ENV["DEBUG"] else "",
                # "DEBUG" if ENV["DEBUG"] else "NDEBUG",
                "NDEBUG",  # FIXME
            ],
        },
        "applications": {
            "CPPDEFINES": [
                "FURI_DEBUG" if ENV["DEBUG"] else "FURI_NDEBUG",
                # "DEBUG" if ENV["DEBUG"] else "NDEBUG",
                "NDEBUG",  # FIXME
            ],
            "CCFLAGS": [
                "-Os" if ENV["COMPACT"] else "-Og",
            ],
        },
    },
    FW_API_TABLE=None,
    _APP_ICONS=None,
    APPS=_.split(",") if (_ := GetOption("extra_int_apps")) else [],
    EXTRA_EXT_APPS=_.split(",") if (_ := GetOption("extra_ext_apps")) else [],
    F_TARGET_HW="f${TARGET_HW}",
    FW_FLASH_TARGET_INTEFACE="target/stm32u5x.cfg",
    CPPDEFINES=GetOption("extra_defines"),
    FW_ARTIFACTS=[],
    FW_ASSETS_HEADERS=[],  # FIXME
)
Export("env")


env.PreConfigureFwEnvionment()

env.ConfigureForTarget()

env.ConfigureFwEnvWithLibraries()

env.ConfigureFwEnvComponents()

env.PostConfigureFwEnvionment()

Return("env")
